#!/usr/bin/env ruby
$LOAD_PATH.unshift File.realdirpath('../lib', __dir__)

require 'coderay'
require 'readline'
require 'io/console'
require 'trace_ruby/navigator'

logname = ARGV[0] || Dir['*.log'].sort_by { |name| name.scan(/\d+/).map &:to_i }.last
logname or abort "No log file provided or found!"

def self.file_linenos(body)
  body.lines.map.with_index(1).to_a.map(&:reverse)
end

def self.files
  @files ||= Hash.new do |h, filename|
    body = File.exist?(filename) ? File.read(filename) : ""
    h[filename] = body
  end
end

def display_file(log:, stdout:, height:, path:, lineno:, event:, method:nil, hide_filename: false, hide_linenos: false)
  header_size  = 2
  header_size -= 1 if hide_filename
  file_lines   = file_linenos stdout.highlight files[path]
  offset       = (height-header_size)/2
  start_line   = [1, lineno - offset].max
  stop_line    = [file_lines.length, lineno + offset].min
  stop_line   -= 1 if (height-header_size) <= (stop_line-start_line)
  lines        = file_lines[start_line-1..stop_line-1]
  stdout << :clear_screen
  stdout << :fg_blue << "===== " << log.index << ". "
  stdout << event
  stdout << " #{method}" if method
  stdout << " =====" << :reset << "\n"
  unless hide_filename
    stdout << :fg_magenta << path << :reset << ":" << :fg_yellow << lineno << :reset << "\n"
  end
  lineno_length = lines.map(&:first).max.to_s.length
  lines.each do |file_lineno, line|
    lineno_str = file_lineno.to_s.rjust(lineno_length)
    if lineno == file_lineno
      coloured_lineno = [:fg_black, :bg_yellow, lineno_str, :reset]
      delimiter       = [:fg_black, :bg_yellow, ":", :reset]
    else
      coloured_lineno = [:fg_yellow, lineno_str, :reset]
      delimiter       = [:fg_magenta, ":", :reset]
    end
    to_print = coloured_lineno + delimiter
    to_print = [] if hide_linenos
    if file_lineno == stop_line
      to_print << line.chomp
    else
      to_print << line
    end
    to_print.each { |e| stdout << e }
  end
  stdout << :last_line
end

# polymorphism so we don't have to do if-statements everywhere
require 'trace_ruby/io'
include TraceRuby
stdin  = $stdin.tty?  ? TtyIn.new(stdin: $stdin)    : FileIn.new(stdin: $stdin)
stdout = $stdout.tty? ? TtyOut.new(stdout: $stdout) : FileOut.new(stdout: $stdout, height: 50, width: 100)

# SIGWINCH gets sent when the terminal is resized
height, width = stdout.winsize
trap('SIGWINCH') { height, width = stdout.winsize }

# hide cursor when running, make sure to show again whenever we leave the program
stdout.hide_cursor
at_exit { stdout << "\n" << :show_cursor }

# SIGTSTP puts the process into the background, SIGCONT puts it into the foreground
bg_orig = nil
bg_trap = proc do
  stdout.show_cursor
  trap 'SIGTSTP', bg_orig
  Process.kill 'SIGTSTP', $$
end
bg_orig = trap 'SIGTSTP', &bg_trap
trap 'SIGCONT' do
  bg_orig = trap 'SIGTSTP', bg_trap
  stdout.hide_cursor
end

define_singleton_method :prompt do |message, lineno: height|
  stdout.goto_line lineno
  stdout.clear_line
  Readline.readline message, true
end





nav = TraceRuby::Navigator.from_stream File.open(logname, 'r')

splash_screen = <<~SPLASH_SCREEN
Information
  nav-file   #{logname}
  num-events #{nav.length}

Controls
  h   This help screen
  j   To next
  k   To previous
  #   To log number
  g   To beginning
  G   To end
  s   Skip forward
  l   Skip to next line event
  /   Find forward
  ?   Find backward
  C-l Redraw
  q   Quit
SPLASH_SCREEN

state = :help
loop do
  if state == :help
    stdout.clear_screen
    stdout.puts stdout.highlight(splash_screen, type: :splash_screen)
    state = :display
  else
    display_file log: nav, stdout: stdout, height: height, **nav.crnt
  end

  case stdin.getch
  when 'h'
    state = :help
  when 'j', "\n"
    nav.next
  when 'k'
    nav.prev
  when  'g'
    nav.to_first
  when 'G'
    nav.to_last
  when '#'
    result = prompt('event number: ')
    index  = result.to_i
    nav.to_index index if index.to_s == result
  when 's'
    nav.skip prompt('skip: ')
  when 'l'
    nav.search_forward :line
  when '/'
    nav.search_forward prompt('search forward: ')
  when '?'
    nav.search_backward prompt('search backward: ')
  when ?\C-l
    # noop, it draws at the beginning of the loop
  when ?\C-z
    Process.kill 'SIGTSTP', $$
  when 'q', 3.chr, 4.chr, nil
    break
  end
end
